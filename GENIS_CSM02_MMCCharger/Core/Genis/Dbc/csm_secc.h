/** CAN message encoder/decoder: automatically generated - do not edit
  * Generated by dbcc: See https://github.com/howerj/dbcc */
#ifndef CSM_SECC_H
#define CSM_SECC_H

#include "../Genis/Charger/Platform_Types.h"

#ifdef __cplusplus
extern "C" { 
#endif

typedef enum {
  csm_secc_msg_SeccInformation_80030001h,
  csm_secc_msg_EvEvccId_80030002h,
  csm_secc_msg_EvChargingService_80030003h,
  csm_secc_msg_EvDcChargingStatus_80030004h,
  csm_secc_msg_EvDcChargingVariable_80030005h,
  csm_secc_msg_EvDcChargeParameter_80030006h,
  csm_secc_msg_EvDcMinimumChargeParam_80030007h,
  csm_secc_msg_EvDcDischargeParam_80030008h,
  csm_secc_msg_EvAcChargeParam_80030009h,
  csm_secc_msg_EvAcPresentActivePower_8003000ah,
  csm_secc_msg_EvAcPresentReactivePower_8003000bh,
  csm_secc_msg_EvAcMaximumChargePower_8003000ch,
  csm_secc_msg_EvAcMinimumChargePower_8003000dh,
  csm_secc_msg_EvAcMaximumDischargePower_8003000eh,
  csm_secc_msg_EvAcMinimumDischargePower_8003000fh,
  csm_secc_msg_EvTargetEnergy_80030010h,
  csm_secc_msg_EvEnergyRequestLimit_80030011h,
  csm_secc_msg_EvDisplayPresentStatus_8003001ah,
  csm_secc_msg_EvDisplayTargetSoc_8003001bh,
  csm_secc_msg_EvDisplayMaximumSoc_8003001ch,
  csm_secc_msg_EvDisplayMinimumSoc_8003001dh,
  csm_secc_msg_KVasEvBatteryHeader_80030101h,
  csm_secc_msg_KVasEvBatteryData_80030102h,
  csm_secc_msg_SeccDateTime_800301f1h,
  csm_secc_msg_max_count,
} csm_secc_msg_types;

#ifndef PREPACK
#define PREPACK
#endif

#ifndef POSTPACK
#define POSTPACK
#endif

#ifndef DBCC_TIME_STAMP
#define DBCC_TIME_STAMP
typedef uint32 dbcc_time_stamp_t; /* Time stamp for message; you decide on units */
#endif

#ifndef DBCC_STATUS_ENUM
#define DBCC_STATUS_ENUM
typedef enum {
	DBCC_SIG_STAT_UNINITIALIZED_E = 0, /* Message never sent/received */
	DBCC_SIG_STAT_OK_E            = 1, /* Message ok */
	DBCC_SIG_STAT_ERROR_E         = 2, /* Encode/Decode/Timestamp/Any error */
} dbcc_signal_status_e;
#endif

typedef PREPACK struct {
	uint16 PwmDutyCycle; /* scaling 0.1, offset 0.0, units %  */
	uint8 SeccStatusCode; /* scaling 1.0, offset 0.0, units none  */
	uint8 SeccErrorCode; /* scaling 1.0, offset 0.0, units none  */
	uint8 SeccSWVersion; /* scaling 1.0, offset 0.0, units none  */
	uint8 ProximityVoltage; /* scaling 0.1, offset 0.0, units V  */
	sint8 PwmVoltage; /* scaling 0.1, offset 0.0, units V  */
	uint8 SeccProtocol; /* scaling 1.0, offset 0.0, units none  */
	uint8 SeccReady; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK SeccInformation_0x80030001_t;

typedef PREPACK struct {
	uint64 EvccId; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK EvEvccId_0x80030002_t;

typedef PREPACK struct {
	uint32 DepartureTime; /* scaling 1.0, offset 0.0, units s  */
	uint16 MaxSupportPoint; /* scaling 1.0, offset 0.0, units none  */
	uint8 RequestedEnergyTransferType; /* scaling 1.0, offset 0.0, units none  */
	uint8 BPT_ChannelSelection; /* scaling 1.0, offset 0.0, units none  */
	uint8 SelectedPaymentOption; /* scaling 1.0, offset 0.0, units none  */
	uint8 Iso20ControlMode; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK EvChargingService_0x80030003_t;

typedef PREPACK struct {
	uint16 RemainingTimeFullSoc; /* scaling 1.0, offset 0.0, units s  */
	uint16 RemainingTimeBulkSoc; /* scaling 1.0, offset 0.0, units s  */
	uint8 EVErrorCode; /* scaling 1.0, offset 0.0, units none  */
	uint8 RESS_Soc; /* scaling 1.0, offset 0.0, units %  */
	uint8 BulkChargingComplete; /* scaling 1.0, offset 0.0, units none  */
	uint8 FullChargingComplete; /* scaling 1.0, offset 0.0, units none  */
	uint8 EvReady; /* scaling 1.0, offset 0.0, units none  */
	uint8 EvCabinConditioning; /* scaling 1.0, offset 0.0, units none  */
	uint8 EvRessConditioning; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK EvDcChargingStatus_0x80030004_t;

typedef PREPACK struct {
	uint16 EVTargetCurrent; /* scaling 0.1, offset 0.0, units A  */
	uint16 EVTargetVoltage; /* scaling 0.1, offset 0.0, units V  */
	uint16 EVMaximumCurrentLimit; /* scaling 0.1, offset 0.0, units A  */
	uint16 EVMaximumVoltageLimit; /* scaling 0.1, offset 0.0, units V  */
} POSTPACK EvDcChargingVariable_0x80030005_t;

typedef PREPACK struct {
	uint16 EVEnergyCapacity; /* scaling 1.0, offset 0.0, units none  */
	uint16 EVEnergyRequest; /* scaling 1.0, offset 0.0, units none  */
	uint16 EVMaximumPowerLimit; /* scaling 0.1, offset 0.0, units kW  */
	uint8 FullSOC; /* scaling 1.0, offset 0.0, units %  */
	uint8 BulkSOC; /* scaling 1.0, offset 0.0, units %  */
} POSTPACK EvDcChargeParameter_0x80030006_t;

typedef PREPACK struct {
	uint16 EVMinimumPowerLimit; /* scaling 0.1, offset 0.0, units kW  */
	uint16 EVMinimumCurrentLimit; /* scaling 0.1, offset 0.0, units A  */
	uint16 EVMinimumVoltageLimit; /* scaling 0.1, offset 0.0, units V  */
} POSTPACK EvDcMinimumChargeParam_0x80030007_t;

typedef PREPACK struct {
	sint16 EVMaximumDischargePower; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVMinimumDischargePower; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVMaximumDischargeCurrent; /* scaling 0.1, offset 0.0, units A  */
	sint16 EVMinimumDischargeCurrent; /* scaling 0.1, offset 0.0, units A  */
} POSTPACK EvDcDischargeParam_0x80030008_t;

typedef PREPACK struct {
	uint16 EAmount; /* scaling 1.0, offset 0.0, units none  */
	uint16 EVMaxVoltage; /* scaling 0.1, offset 0.0, units V  */
	uint16 EVMaxCurrent; /* scaling 0.1, offset 0.0, units A  */
	uint16 EVMinCurrent; /* scaling 0.1, offset 0.0, units A  */
} POSTPACK EvAcChargeParam_0x80030009_t;

typedef PREPACK struct {
	sint16 EVPresentActivePower; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVPresentActivePower_L2; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVPresentActivePower_L3; /* scaling 0.1, offset 0.0, units kW  */
} POSTPACK EvAcPresentActivePower_0x8003000a_t;

typedef PREPACK struct {
	sint16 EVPresentReactivePower; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVPresentReactivePower_L2; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVPresentReactivePower_L3; /* scaling 0.1, offset 0.0, units kW  */
} POSTPACK EvAcPresentReactivePower_0x8003000b_t;

typedef PREPACK struct {
	sint16 EVMaximumChargePower; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVMaximumChargePower_L2; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVMaximumChargePower_L3; /* scaling 0.1, offset 0.0, units kW  */
} POSTPACK EvAcMaximumChargePower_0x8003000c_t;

typedef PREPACK struct {
	uint16 EVMinimumChargePower; /* scaling 0.1, offset 0.0, units kW  */
	uint16 EVMinimumChargePower_L2; /* scaling 0.1, offset 0.0, units kW  */
	uint16 EVMinimumChargePower_L3; /* scaling 0.1, offset 0.0, units kW  */
} POSTPACK EvAcMinimumChargePower_0x8003000d_t;

typedef PREPACK struct {
	sint16 EVMaximumDischargePower; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVMaximumDischargePower_L2; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVMaximumDischargePower_L3; /* scaling 0.1, offset 0.0, units kW  */
} POSTPACK EvAcMaximumDischargePower_0x8003000e_t;

typedef PREPACK struct {
	sint16 EVMinimumDischargePower; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVMinimumDischargePower_L2; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVMinimumDischargePower_L3; /* scaling 0.1, offset 0.0, units kW  */
} POSTPACK EvAcMinimumDischargePower_0x8003000f_t;

typedef PREPACK struct {
	sint16 EVTargetEnergyRequest; /* scaling 0.1, offset 0.0, units kWh  */
} POSTPACK EvTargetEnergy_0x80030010_t;

typedef PREPACK struct {
	uint16 EVMaximumEnergyRequest; /* scaling 0.1, offset 0.0, units kWh  */
	uint16 EVMinimumEnergyRequest; /* scaling 0.1, offset 0.0, units kWh  */
	sint16 EVMaximumV2XEnergyRequest; /* scaling 0.1, offset 0.0, units kWh  */
	sint16 EVMinimumV2XEnergyRequest; /* scaling 0.1, offset 0.0, units kWh  */
} POSTPACK EvEnergyRequestLimit_0x80030011_t;

typedef PREPACK struct {
	uint16 BatteryEnergyCapacity; /* scaling 1.0, offset 0.0, units none  */
	uint8 PresentSoc; /* scaling 1.0, offset 0.0, units %  */
	uint8 ChargingComplete; /* scaling 1.0, offset 0.0, units none  */
	uint8 InletHot; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK EvDisplayPresentStatus_0x8003001a_t;

typedef PREPACK struct {
	uint32 RemainingTime; /* scaling 1.0, offset 0.0, units s  */
	uint8 TargetSoc; /* scaling 1.0, offset 0.0, units %  */
} POSTPACK EvDisplayTargetSoc_0x8003001b_t;

typedef PREPACK struct {
	uint32 RemainingTime; /* scaling 1.0, offset 0.0, units s  */
	uint8 MaximumSoc; /* scaling 1.0, offset 0.0, units %  */
} POSTPACK EvDisplayMaximumSoc_0x8003001c_t;

typedef PREPACK struct {
	uint32 RemainingTime; /* scaling 1.0, offset 0.0, units s  */
	uint8 MinimumSoc; /* scaling 1.0, offset 0.0, units %  */
} POSTPACK EvDisplayMinimumSoc_0x8003001d_t;

typedef PREPACK struct {
	uint16 VasDataLength; /* scaling 1.0, offset 0.0, units none  */
	uint8 VasReceivedCount; /* scaling 1.0, offset 0.0, units none  */
	uint8 VasDataChecksum; /* scaling 1.0, offset 0.0, units none  */
	uint8 VasState; /* scaling 1.0, offset 0.0, units none  */
	uint8 VasErrorCode; /* scaling 1.0, offset 0.0, units none  */
	uint8 VasEnabled; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK KVasEvBatteryHeader_0x80030101_t;

typedef PREPACK struct {
	uint8 Data0_or_Length; /* scaling 1.0, offset 0.0, units none  */
	uint8 Data1; /* scaling 1.0, offset 0.0, units none  */
	uint8 Data2; /* scaling 1.0, offset 0.0, units none  */
	uint8 Data3; /* scaling 1.0, offset 0.0, units none  */
	uint8 Data4; /* scaling 1.0, offset 0.0, units none  */
	uint8 Data5; /* scaling 1.0, offset 0.0, units none  */
	uint8 Data6; /* scaling 1.0, offset 0.0, units none  */
	uint8 SN_or_Length; /* scaling 1.0, offset 0.0, units none  */
	uint8 FrameType; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK KVasEvBatteryData_0x80030102_t;

typedef PREPACK struct {
	uint8 Year; /* scaling 1.0, offset 0.0, units none  */
	uint8 Minutes; /* scaling 1.0, offset 0.0, units none  */
	uint8 Seconds; /* scaling 1.0, offset 0.0, units none  */
	uint8 Day; /* scaling 1.0, offset 0.0, units none  */
	uint8 Hours; /* scaling 1.0, offset 0.0, units none  */
	uint8 Month; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK SeccDateTime_0x800301f1_t;

typedef PREPACK struct {
	SeccInformation_0x80030001_t SeccInformation;
	EvEvccId_0x80030002_t EvEvccId;
	EvChargingService_0x80030003_t EvChargingService;
	EvDcChargingStatus_0x80030004_t EvDcChargingStatus;
	EvDcChargingVariable_0x80030005_t EvDcChargingVariable;
	EvDcChargeParameter_0x80030006_t EvDcChargeParameter;
	EvDcMinimumChargeParam_0x80030007_t EvDcMinimumChargeParam;
	EvDcDischargeParam_0x80030008_t EvDcDischargeParam;
	EvAcChargeParam_0x80030009_t EvAcChargeParam;
	EvAcPresentActivePower_0x8003000a_t EvAcPresentActivePower;
	EvAcPresentReactivePower_0x8003000b_t EvAcPresentReactivePower;
	EvAcMaximumChargePower_0x8003000c_t EvAcMaximumChargePower;
	EvAcMinimumChargePower_0x8003000d_t EvAcMinimumChargePower;
	EvAcMaximumDischargePower_0x8003000e_t EvAcMaximumDischargePower;
	EvAcMinimumDischargePower_0x8003000f_t EvAcMinimumDischargePower;
	EvTargetEnergy_0x80030010_t EvTargetEnergy;
	EvEnergyRequestLimit_0x80030011_t EvEnergyRequestLimit;
	EvDisplayPresentStatus_0x8003001a_t EvDisplayPresentStatus;
	EvDisplayTargetSoc_0x8003001b_t EvDisplayTargetSoc;
	EvDisplayMaximumSoc_0x8003001c_t EvDisplayMaximumSoc;
	EvDisplayMinimumSoc_0x8003001d_t EvDisplayMinimumSoc;
	KVasEvBatteryHeader_0x80030101_t KVasEvBatteryHeader;
	KVasEvBatteryData_0x80030102_t KVasEvBatteryData;
	SeccDateTime_0x800301f1_t SeccDateTime;
} POSTPACK can_csm_secc_t;

int candb_csm_secc_unpack_message(can_csm_secc_t *o, const unsigned long id, uint64 data, uint8 dlc, dbcc_time_stamp_t time_stamp);
int candb_csm_secc_pack_message(can_csm_secc_t *o, const unsigned long id, uint64 *data);

int candb_csm_secc_get_can_id(csm_secc_msg_types msg_type);

#ifdef __cplusplus
} 
#endif

#endif
