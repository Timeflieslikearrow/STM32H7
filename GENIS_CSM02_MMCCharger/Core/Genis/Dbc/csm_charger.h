/** CAN message encoder/decoder: automatically generated - do not edit
  * Generated by dbcc: See https://github.com/howerj/dbcc */
#ifndef CSM_CHARGER_H
#define CSM_CHARGER_H

#include "../Genis/Charger/Platform_Types.h"

#ifdef __cplusplus
extern "C" { 
#endif

typedef enum {
  csm_charger_msg_ChargerStatus_80040001h,
  csm_charger_msg_ChargerChargingVariable_80040002h,
  csm_charger_msg_ChargerChargingService_80040003h,
  csm_charger_msg_ChargerDcChargeParameter1_80040006h,
  csm_charger_msg_ChargerDcChargeParameter2_80040007h,
  csm_charger_msg_ChargerDcDischargeParam_80040008h,
  csm_charger_msg_ChargerAcChargeParam_80040009h,
  csm_charger_msg_ChargerAcPresentActivePower_8004000bh,
  csm_charger_msg_ChargerAcTargetActivePower_8004000ch,
  csm_charger_msg_ChargerAcTargetReactivePower_8004000dh,
  csm_charger_msg_ChargerAcMaximumChargePower_8004000eh,
  csm_charger_msg_ChargerAcMinimumChargePower_8004000fh,
  csm_charger_msg_ChargerAcMaximumDischargePower_80040010h,
  csm_charger_msg_ChargerAcMinimumDischargePower_80040011h,
  csm_charger_msg_ChargerAcChargingSafety_80040012h,
  csm_charger_msg_ChargerAcFrtLvrt_80040020h,
  csm_charger_msg_ChargerAcFrtHvrt_80040021h,
  csm_charger_msg_ChargerAcFrtReactivePower_80040022h,
  csm_charger_msg_ChargerDateTime_800401f1h,
  csm_charger_msg_max_count,
} csm_charger_msg_types;

#ifndef PREPACK
#define PREPACK
#endif

#ifndef POSTPACK
#define POSTPACK
#endif

#ifndef DBCC_TIME_STAMP
#define DBCC_TIME_STAMP
typedef uint32 dbcc_time_stamp_t; /* Time stamp for message; you decide on units */
#endif

#ifndef DBCC_STATUS_ENUM
#define DBCC_STATUS_ENUM
typedef enum {
	DBCC_SIG_STAT_UNINITIALIZED_E = 0, /* Message never sent/received */
	DBCC_SIG_STAT_OK_E            = 1, /* Message ok */
	DBCC_SIG_STAT_ERROR_E         = 2, /* Encode/Decode/Timestamp/Any error */
} dbcc_signal_status_e;
#endif

typedef PREPACK struct {
	uint8 ChargingEnergyTransferType; /* scaling 1.0, offset 0.0, units none  */
	uint8 BptSupported; /* scaling 1.0, offset 0.0, units none  */
	uint8 ChargingPriority; /* scaling 1.0, offset 0.0, units none  */
	uint8 IdentificationOptionType; /* scaling 1.0, offset 0.0, units none  */
	uint8 Iso20ControlMode; /* scaling 1.0, offset 0.0, units none  */
	uint8 ChargingStatus; /* scaling 1.0, offset 0.0, units none  */
	uint8 ChargingStopControl; /* scaling 1.0, offset 0.0, units none  */
	uint8 EVSEMalfunction; /* scaling 1.0, offset 0.0, units none  */
	uint8 EmergencyShutdown; /* scaling 1.0, offset 0.0, units none  */
	uint8 AuthFinished; /* scaling 1.0, offset 0.0, units none  */
	uint8 ChargeParameterFinished; /* scaling 1.0, offset 0.0, units none  */
	uint8 DcCableIsolationChecked; /* scaling 1.0, offset 0.0, units none  */
	uint8 DcEVSECurrentLimitAchieved; /* scaling 1.0, offset 0.0, units none  */
	uint8 DcEVSEVoltageLimitAchieved; /* scaling 1.0, offset 0.0, units none  */
	uint8 DcEVSEPowerLimitAchieved; /* scaling 1.0, offset 0.0, units none  */
	uint8 DcCableIsolationFaulted; /* scaling 1.0, offset 0.0, units none  */
	uint8 ServiceRenegotiationSupported; /* scaling 1.0, offset 0.0, units none  */
	uint8 VasEnable; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK ChargerStatus_0x80040001_t;

typedef PREPACK struct {
	uint32 MeteringValue; /* scaling 0.0, offset 0.0, units kWh  */
	uint16 EVSEPresentVoltage; /* scaling 0.1, offset 0.0, units V  */
	sint16 EVSEPresentCurrent; /* scaling 0.1, offset 0.0, units A  */
} POSTPACK ChargerChargingVariable_0x80040002_t;

typedef PREPACK struct {
	uint32 DepartureTime; /* scaling 0.2, offset 0.0, units kWh  */
	uint8 TargetSoc; /* scaling 0.1, offset 0.0, units A  */
	uint8 MinimumSoc; /* scaling 0.1, offset 0.0, units V  */
	uint8 BPTChannel; /* scaling 1.0, offset 0.0, units none  */
	uint8 GenerateMode; /* scaling 1.0, offset 0.0, units none  */
	uint8 GridCodeIslandingDetectionMethod; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK ChargerChargingService_0x80040003_t;

typedef PREPACK struct {
	uint16 EVSEMaximumCurrentLimit; /* scaling 0.1, offset 0.0, units A  */
	uint16 EVSEMaximumVoltageLimit; /* scaling 0.1, offset 0.0, units V  */
	uint16 EVSEMinimumCurrentLimit; /* scaling 0.1, offset 0.0, units A  */
	uint16 EVSEMinimumVoltagelimit; /* scaling 0.1, offset 0.0, units V  */
} POSTPACK ChargerDcChargeParameter1_0x80040006_t;

typedef PREPACK struct {
	uint16 EVSEPeakCurrentRipple; /* scaling 0.1, offset 0.0, units A  */
	uint16 EVSEMaximumPowerLimit; /* scaling 0.1, offset 0.0, units kW  */
	uint16 EVSECurrentRegulationTolerance; /* scaling 0.1, offset 0.0, units A  */
	uint16 EVSEEnergyToBeDelivered; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK ChargerDcChargeParameter2_0x80040007_t;

typedef PREPACK struct {
	sint16 MaximumDischargePower; /* scaling 0.1, offset 0.0, units kW  */
	sint16 MinimumDischargePower; /* scaling 0.1, offset 0.0, units kW  */
	sint16 MaximumDischargeCurrent; /* scaling 0.1, offset 0.0, units A  */
	sint16 MinimumDischargeCurrent; /* scaling 0.1, offset 0.0, units A  */
} POSTPACK ChargerDcDischargeParam_0x80040008_t;

typedef PREPACK struct {
	uint16 EVSEMaxCurrent; /* scaling 0.1, offset 0.0, units A  */
	uint16 EVSENominalVoltage; /* scaling 0.1, offset 0.0, units V  */
	uint16 EVSENominalFrequency; /* scaling 1.0, offset 0.0, units Hz  */
	uint16 EVSETargetFrequency; /* scaling 1.0, offset 0.0, units Hz  */
} POSTPACK ChargerAcChargeParam_0x80040009_t;

typedef PREPACK struct {
	sint16 EVSEPresentActivePower; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVSEPresentActivePower_L2; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVSEPresentActivePower_L3; /* scaling 0.1, offset 0.0, units kW  */
} POSTPACK ChargerAcPresentActivePower_0x8004000b_t;

typedef PREPACK struct {
	sint16 EVSETargetActivePower; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVSETargetActivePower_L2; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVSETargetActivePower_L3; /* scaling 0.1, offset 0.0, units kW  */
} POSTPACK ChargerAcTargetActivePower_0x8004000c_t;

typedef PREPACK struct {
	sint16 EVSETargetReactivePower; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVSETargetReactivePower_L2; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVSETargetReactivePower_L3; /* scaling 0.1, offset 0.0, units kW  */
} POSTPACK ChargerAcTargetReactivePower_0x8004000d_t;

typedef PREPACK struct {
	uint16 EVSEMaximumChargePower; /* scaling 0.1, offset 0.0, units kW  */
	uint16 EVSEMaximumChargePower_L2; /* scaling 0.1, offset 0.0, units kW  */
	uint16 EVSEMaximumChargePower_L3; /* scaling 0.1, offset 0.0, units kW  */
} POSTPACK ChargerAcMaximumChargePower_0x8004000e_t;

typedef PREPACK struct {
	uint16 EVSEMinimumChargePower; /* scaling 0.1, offset 0.0, units kW  */
	uint16 EVSEMinimumChargePower_L2; /* scaling 0.1, offset 0.0, units kW  */
	uint16 EVSEMinimumChargePower_L3; /* scaling 0.1, offset 0.0, units kW  */
} POSTPACK ChargerAcMinimumChargePower_0x8004000f_t;

typedef PREPACK struct {
	sint16 EVSEMaximumDischargePower; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVSEMaximumDischargePower_L2; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVSEMaximumDischargePower_L3; /* scaling 0.1, offset 0.0, units kW  */
} POSTPACK ChargerAcMaximumDischargePower_0x80040010_t;

typedef PREPACK struct {
	sint16 EVSEMinimumDischargePower; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVSEMinimumDischargePower_L2; /* scaling 0.1, offset 0.0, units kW  */
	sint16 EVSEMinimumDischargePower_L3; /* scaling 0.1, offset 0.0, units kW  */
} POSTPACK ChargerAcMinimumDischargePower_0x80040011_t;

typedef PREPACK struct {
	uint16 MaximumPowerAsymmetry; /* scaling 0.1, offset 0.0, units kW  */
	uint16 EVSEPowerRampLimitation; /* scaling 0.1, offset 0.0, units kW  */
} POSTPACK ChargerAcChargingSafety_0x80040012_t;

typedef PREPACK struct {
	sint16 LVRTMomentaryCessationEnable; /* scaling 1.0, offset 0.0, units none  */
	sint16 LVRTMomentaryCessationVoltage; /* scaling 0.1, offset 0.0, units V  */
	sint16 LVRTMomentaryCessationRecoveryV; /* scaling 0.1, offset 0.0, units V  */
} POSTPACK ChargerAcFrtLvrt_0x80040020_t;

typedef PREPACK struct {
	sint16 HVRTMomentaryCessationEnable; /* scaling 1.0, offset 0.0, units none  */
	sint16 HVRTMomentaryCessationVoltage; /* scaling 0.1, offset 0.0, units V  */
	sint16 HVRTMomentaryCessationRecoveryV; /* scaling 0.1, offset 0.0, units V  */
} POSTPACK ChargerAcFrtHvrt_0x80040021_t;

typedef PREPACK struct {
	sint16 ReactivePowerResponseTimeEnable; /* scaling 1.0, offset 0.0, units none  */
	sint16 ReactivePowerControlResponse; /* scaling 1.0, offset 0.0, units s  */
} POSTPACK ChargerAcFrtReactivePower_0x80040022_t;

typedef PREPACK struct {
	uint8 Year; /* scaling 1.0, offset 0.0, units none  */
	uint8 Minutes; /* scaling 1.0, offset 0.0, units none  */
	uint8 Seconds; /* scaling 1.0, offset 0.0, units none  */
	uint8 Day; /* scaling 1.0, offset 0.0, units none  */
	uint8 Hours; /* scaling 1.0, offset 0.0, units none  */
	uint8 Month; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK ChargerDateTime_0x800401f1_t;

typedef PREPACK struct {
	ChargerStatus_0x80040001_t ChargerStatus;
	ChargerChargingVariable_0x80040002_t ChargerChargingVariable;
	ChargerChargingService_0x80040003_t ChargerChargingService;
	ChargerDcChargeParameter1_0x80040006_t ChargerDcChargeParameter1;
	ChargerDcChargeParameter2_0x80040007_t ChargerDcChargeParameter2;
	ChargerDcDischargeParam_0x80040008_t ChargerDcDischargeParam;
	ChargerAcChargeParam_0x80040009_t ChargerAcChargeParam;
	ChargerAcPresentActivePower_0x8004000b_t ChargerAcPresentActivePower;
	ChargerAcTargetActivePower_0x8004000c_t ChargerAcTargetActivePower;
	ChargerAcTargetReactivePower_0x8004000d_t ChargerAcTargetReactivePower;
	ChargerAcMaximumChargePower_0x8004000e_t ChargerAcMaximumChargePower;
	ChargerAcMinimumChargePower_0x8004000f_t ChargerAcMinimumChargePower;
	ChargerAcMaximumDischargePower_0x80040010_t ChargerAcMaximumDischargePower;
	ChargerAcMinimumDischargePower_0x80040011_t ChargerAcMinimumDischargePower;
	ChargerAcChargingSafety_0x80040012_t ChargerAcChargingSafety;
	ChargerAcFrtLvrt_0x80040020_t ChargerAcFrtLvrt;
	ChargerAcFrtHvrt_0x80040021_t ChargerAcFrtHvrt;
	ChargerAcFrtReactivePower_0x80040022_t ChargerAcFrtReactivePower;
	ChargerDateTime_0x800401f1_t ChargerDateTime;
} POSTPACK can_csm_charger_t;

int candb_csm_charger_unpack_message(can_csm_charger_t *o, const unsigned long id, uint64 data, uint8 dlc, dbcc_time_stamp_t time_stamp);
int candb_csm_charger_pack_message(can_csm_charger_t *o, const unsigned long id, uint64 *data);

int candb_csm_charger_get_can_id(csm_charger_msg_types msg_type);

#ifdef __cplusplus
} 
#endif

#endif
